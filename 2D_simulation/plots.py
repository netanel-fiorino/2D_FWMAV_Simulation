import numpy as np
import matplotlib.pyplot as plt
import sys
sys.path.append('..')

from parameters import *


def plot_figures(t, results, wing_force, tail_force, alpha_Arr, wing_angles, wing_angle_vel):
    plt.figure(figsize=(12, 12))

    plt.subplot(3, 2, 1)
    plt.title("A) FWMAV Flight Path")
    plt.plot(results[:, 0], results[:, 1], label="FWMAV")
    plt.legend()
    plt.xlabel("x position [m]")
    plt.ylabel("y position [m]")
    plt.grid()

    plt.subplot(3, 2, 3)
    plt.title("C) FWMAV Position vs Time")
    plt.plot(t, results[:, 0], label="X")
    plt.plot(t, results[:, 1], label="Y")
    plt.legend()
    plt.xlabel("Time [s]")
    plt.ylabel("Position [m]")
    plt.grid()

    plt.subplot(3, 2, 5)
    plt.title("E) FWMAV Velocity vs Time")
    plt.plot(t, results[:, 3], label="Xdot")
    plt.plot(t, results[:, 4], label="Ydot")
    plt.legend()
    plt.xlabel("Time [s]")
    plt.ylabel("Velocity [m/s]")
    plt.grid()

    plt.subplot(3, 2, 4)
    plt.title("D) FWMAV Angles vs Time")
    plt.plot(t, np.degrees(results[:, 2]), label="Theta")
    plt.plot(t, np.degrees(tail_force[2, :]), label="Alpha Tail")
    #plt.plot(t, np.degrees(results[:, 2] - np.arctan2(results[:, 4] + results[:, 5]*r_tail*np.cos(results[:, 2]), results[:, 3] + -results[:, 5]*r_tail*np.sin(results[:, 2]))- angle_tail), label="Alpha tail")
    #plt.plot(t, np.degrees(results[:, 2] - np.arctan2(results[:, 4] + results[:, 5]*r_tail*np.cos(results[:, 2]), results[:, 3] + -results[:, 5]*r_tail*np.sin(results[:, 2]))), label="Alpha Body")
    plt.plot(t, np.degrees(results[:, 2] - np.arctan2(results[:, 4], results[:, 3])), label="Alpha Body")
    plt.plot(t, np.degrees(alpha_Arr), alpha=0.5, label="Alpha wing")
    plt.legend()
    plt.xlabel("Time [s]")
    plt.ylabel("Angle [Deg]")
    plt.grid()

    plt.subplot(3, 2, 6)
    plt.title("F) FWMAV Rotational Velocity vs Time")
    plt.plot(t, results[:, 5], label="Thetadot")
    plt.legend()
    plt.xlabel("Time [s]")
    plt.ylabel("Angular Velocity [rad/s]")
    plt.grid()

    plt.subplot(3, 2, 2)
    plt.title("B) FWMAV Wing and Tail Force vs Time")
    #plt.plot(result.t, np.degrees(result.y[2, :] - np.arctan2(-result.y[4, :], result.y[3, :])), label="Alpha")
    plt.plot(t, wing_force[:, 0], label="Wing Force X")
    plt.plot(t, wing_force[:, 1], label="Wing Force Y")
    plt.plot(t, tail_force[0, :], label="Tail Force X")
    plt.plot(t, tail_force[1, :], label="Tail Force Y")
    # plt.plot(t, wing_force[:, 0]*-np.cos(alpha_Arr) + wing_force[:, 1]*np.sin(alpha_Arr), label="Wing Force Lift")
    # plt.plot(t, wing_force[:, 0]*np.sin(alpha_Arr) + wing_force[:, 1]*np.cos(alpha_Arr), label="Wing Force Drag")
    # plt.plot(t, tail_force[0, :]*-np.cos(tail_force[2, :]) + tail_force[1, :]*np.sin(tail_force[2, :]), label="Tail Force Lift")
    # plt.plot(t, tail_force[0, :]*np.sin(tail_force[2, :]) + tail_force[1, :]*np.cos(tail_force[2, :]), label="Tail Force Drag")
    plt.legend()
    plt.xlabel("Time [s]")
    plt.ylabel("Force [N]")
    plt.grid()



    plt.figure(figsize=(8, 12))
    plt.subplot(3, 1, 1)
    plt.title("Wing Kinematics")
    plt.plot(t, np.degrees(wing_angles[:, 0]), label="Stroke Angle")
    plt.plot(t, np.degrees(wing_angles[:, 1]), label="Deviation Angle")
    plt.plot(t, np.degrees(wing_angles[:, 2]), label="Pitch Angle")
    # plt.plot(tArr, np.degrees(alpha_Arr), alpha=0.5, label="Alpha wing")
    plt.legend()
    plt.xlabel("Time [s]")
    plt.ylabel("Angle [deg]")
    plt.grid()

    # plt.subplot(4, 1, 2)
    # plt.title("Wing Flapping Moment vs Time")
    # plt.plot(t, wing_moment[:, 0], label="Moment")
    # plt.legend()
    # plt.xlabel("Time [s]")
    # plt.ylabel("Moment [Nm]")
    # plt.grid()

    plt.subplot(3, 1, 2)
    plt.title("Wing Flapping Force vs Time")
    plt.plot(t, wing_force[:, 0], label="Fx")
    plt.plot(t, wing_force[:, 1], label="Fy")
    # plt.plot(tArr, wing_force[:, 0]*-np.cos(alpha_Arr) + wing_force[:, 1]*np.sin(alpha_Arr), label="Wing Force Lift")
    # plt.plot(tArr, wing_force[:, 0]*np.sin(alpha_Arr) + wing_force[:, 1]*np.cos(alpha_Arr), label="Wing Force Drag")
    plt.legend()
    plt.xlabel("Time [s]")
    plt.ylabel("Force [N]")
    plt.grid()

    plt.subplot(3, 1, 3)
    plt.title("Wing Angles Speeds vs Time")
    plt.plot(t, (wing_angle_vel[:, 0]), label="Stroke Angle Speed")
    plt.plot(t, (wing_angle_vel[:, 1]), label="Deviation Angle Speed")
    plt.plot(t, (wing_angle_vel[:, 2]), label="Pitch Angle Speed")
    plt.legend()
    plt.xlabel("Time [s]")
    plt.ylabel("Angular Velocity [rad/s]")
    plt.grid()

    plt.tight_layout()
    plt.show()